"""
Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""


new_dict = dict(comp1=500000000000, comp2=555555555555, comp3=23562582375, comp4=89723572659, comp5=999999999999,
                comp6=2635872356723, comp7=23572534643, comp8=75742375235, comp9=47583947821, comp10=888989888989)


def func_1(dict_obj):
    profit = list(dict_obj.values())  # (3)
    profit.sort(reverse=True)  # (n log n)
    for name, prof in dict_obj.items():  # (n + 1)
        if prof in profit[0:3]:  # (n + 3)
            print(name)  # (1)
# T(n) = 3 + n log n + (n + 1) * (n + 4) = 7 + n log n + n**2 + 5n
# O(n**2)


def func_2(dict_obj):
    items = list(dict_obj.items())  # (3)
    profit = list(dict_obj.values())  # (3)
    profit.sort(reverse=True)  # (n log n)
    for n, item in enumerate(items):  # (n)
        if item[1] in profit[0:3]:  # (n + 4)
            print(item[0])  # (1)
# T(n) = 6 + n log n + n * (n + 5) = 6 + n log n + n**2 + 5n
# O(n**2)

# Получается 2е решение быстрее, хотя по O они одинаковы. Даже не уверен, что правильно определил каждое действие и
# сложил верно.


func_1(new_dict)
func_2(new_dict)
