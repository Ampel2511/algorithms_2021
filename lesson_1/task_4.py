"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""

new_dict = dict(user_1=[0, '12345'], user_2=[1, '1234235'], user_3=[0, '1223345'],
                user_4=[1, '12234345'], user_5=[0, '12348765'],
                user_6=[1, '123445'], user_7=[1, '1762345'], user_8=[1, '1267345'],
                user_9=[0, '12376545'], user_10=[0, '12397845']
                )


def check_user_1(dict_obj):
    for key, value in dict_obj.items():  # (n + 1)
        if value[0] == 0:  # (2)
            print(f'Пользователь {key} не прошел активацию')  # (1)
        else:
            print(f'Пользователь {key} прошел активацию')  # (1)

# T(n) = 4n + 4
# O(n)


def check_user_2(dict_obj):
    for key in dict_obj:  # (n)
        if dict_obj[key][0] == 0:  # (3)
            print(f'Пользователь {key} не прошел активацию')  # (1)
        else:
            print(f'Пользователь {key} прошел активацию')  # (1)

# T(n) = 5n
# O(n)

# Получается 1я функция быстрее, т.к 4n < 5n.
# Есть вопросы по поводу того, как правильно считать некоторые виды написания:
# 1) for i,n in dict_obj.items() считать как n или как (n + 1)
# 2) Если в строке выполняется несколько константных действий, их суммировать или писать как 1?
# 3) Если извлекается срез list[1:5], считается как O(1) или O(4)?
# 4) Если используются операторы сравнения, например if i > 10: ... , то они считаются как O(1)?

check_user_1(new_dict)
check_user_2(new_dict)
